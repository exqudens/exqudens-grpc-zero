buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'com.google.protobuf'

sourceSets.main.java.srcDirs      = ['src/main/java', 'src/main/generated']
sourceSets.main.resources.srcDirs = ['src/main/resources']
sourceSets.test.java.srcDirs      = ['src/test/java']
sourceSets.test.resources.srcDirs = ['src/test/resources']
sourceSets.main.proto.srcDirs     = [sourceSets.main.resources.srcDirs.last().getPath() + '/proto']
sourceSets.test.proto.srcDirs     = [sourceSets.test.resources.srcDirs.last().getPath() + '/proto']

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    if (System.getenv().GIT_BRANCH == null) {
        mavenLocal()
    }
    mavenCentral()
}

dependencies {

    compile group: 'io.grpc', name: 'grpc-netty',    version: '1.18.0'
    compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.18.0'
    compile group: 'io.grpc', name: 'grpc-stub',     version: '1.18.0'

}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.18.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = 'generated'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'generated'
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src"
}

task sourcesJar(type: Jar, dependsOn: ['classes']) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: ['javadoc']) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task cleanGenerateProto() {
    doLast {
        delete 'src/main/generated'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

jar {
    manifest {
        attributes 'Project-Group': project.group, 'Project-Name': project.name, 'Project-Version': project.version
    }
}

eclipse {
    jdt {
        sourceCompatibility = property('sourceCompatibility')
        targetCompatibility = property('targetCompatibility')
    }
    project {
        file {
            whenMerged { project ->
                project.buildCommands.clear()
                project.buildCommands.add(new org.gradle.plugins.ide.eclipse.model.BuildCommand('org.eclipse.jdt.core.javabuilder'))
                project.natures.clear()
                project.natures = ['org.eclipse.jdt.core.javanature']
            }
        }
    }
    classpath {
        plusConfigurations = [configurations.compileOnly, configurations.testCompileOnly, configurations.testRuntime]
        minusConfigurations = []
    }
}

tasks['eclipse'].doLast {
    delete '.settings/org.eclipse.wst.common.component'
    delete '.settings/org.eclipse.wst.common.project.facet.core.xml'
}

tasks['cleanEclipse'].doLast {
    delete '.settings'
    delete 'bin'
}

tasks['cleanIdea'].doLast {
    delete '.idea'
}

tasks['cleanIdea'].dependsOn 'cleanIdeaWorkspace'
tasks['cleanEclipse'].dependsOn 'cleanGenerateProto'
tasks['eclipseClasspath'].dependsOn 'generateProto'
